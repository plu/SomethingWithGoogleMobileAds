// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CriteoPublisherSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
@_exported import CriteoPublisherSdk
import Foundation
import MessageUI
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isVisibleToUser: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cr_parentViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cr_rootViewController() -> UIKit.UIViewController?
}
extension Swift.Bool {
  public var stringValue: Swift.String {
    get
  }
}
extension CoreFoundation.CGRect {
  public func contains(points: [CoreFoundation.CGPoint]) -> Swift.Bool
}
@objc public protocol CRMRAIDHandlerDelegate {
  @objc optional func expand(width: Swift.Int, height: Swift.Int, url: Foundation.URL?, completion: CriteoPublisherSdk.VoidCompletion?)
  @objc func close(completion: CriteoPublisherSdk.VoidCompletion?)
}
public protocol CRFulllScreenContainerDelegate : AnyObject {
  func didExitFullScreen(webView: WebKit.WKWebView)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class CRFulllScreenContainer : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(with webView: WebKit.WKWebView, size: CoreFoundation.CGSize, mraidHandler: CriteoPublisherSdk.CRMRAIDHandler, dismissCompletion: CriteoPublisherSdk.VoidCompletion?)
  @objc @_Concurrency.MainActor(unsafe) public func close(with completion: CriteoPublisherSdk.VoidCompletion?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public enum MRAIDState : Swift.String, Swift.Decodable {
  case loading
  case `default`
  case expanded
  case hidden
  case resized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MRAIDFeatures : Swift.Codable {
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum CRPlacementType : Swift.Int {
  case banner
  case interstitial
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol MRAIDMessageHandlerDelegate : AnyObject {
  func didReceive(expand action: CriteoPublisherSdk.MRAIDExpandMessage)
  func didReceiveCloseAction()
  func didReceivePlayVideoAction(with url: Swift.String)
  func didReceive(resize action: CriteoPublisherSdk.MRAIDResizeMessage)
  func didReceive(orientation properties: CriteoPublisherSdk.MRAIDOrientationPropertiesMessage)
}
public struct MRAIDMessageHandler {
  weak public var delegate: (any CriteoPublisherSdk.MRAIDMessageHandlerDelegate)?
  public init(logHandler: CriteoPublisherSdk.MRAIDLogHandler, urlHandler: any CriteoPublisherSdk.MRAIDURLHandler)
  public func handle(message: Any)
}
public struct MRAIDExpandMessage : Swift.Decodable {
  public let action: CriteoPublisherSdk.Action
  public let width: Swift.Int
  public let height: Swift.Int
  public let url: Foundation.URL?
  public init(from decoder: any Swift.Decoder) throws
}
public typealias VoidCompletion = () -> Swift.Void
@objc public class CRMRAIDHandler : ObjectiveC.NSObject {
  @objc public init(placementType: CriteoPublisherSdk.CRPlacementType, webView: WebKit.WKWebView, criteoLogger: any CriteoPublisherSdk.CRMRAIDLogger, urlOpener: any CriteoPublisherSdk.CRExternalURLOpener, delegate: (any CriteoPublisherSdk.CRMRAIDHandlerDelegate)?)
  @objc public func send(error: Swift.String, action: Swift.String)
  @objc public func startViabilityNotifier()
  @objc deinit
  @objc public func canLoadAd() -> Swift.Bool
  @objc public func isExpanded() -> Swift.Bool
  @objc public func inject(into html: Swift.String) -> Swift.String
  @objc public func onAdLoad()
  @objc public func onSuccessClose()
  @objc public func injectMRAID()
  @objc public func updateMraid(bundle: Foundation.Bundle?)
  @objc public func setCurrentPosition()
  @objc public func setScreen(size: CoreFoundation.CGSize)
  @objc public func shouldAdAutoRotate() -> Swift.Bool
  @objc public func supportedInterfaceOrientations() -> UIKit.UIInterfaceOrientationMask
  @objc public func onDealloc()
}
extension CriteoPublisherSdk.CRMRAIDHandler : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension CriteoPublisherSdk.CRMRAIDHandler : CriteoPublisherSdk.MRAIDMessageHandlerDelegate {
  public func didReceive(expand action: CriteoPublisherSdk.MRAIDExpandMessage)
  public func didReceiveCloseAction()
  public func didReceivePlayVideoAction(with url: Swift.String)
  public func didReceive(resize action: CriteoPublisherSdk.MRAIDResizeMessage)
  public func didReceive(orientation properties: CriteoPublisherSdk.MRAIDOrientationPropertiesMessage)
}
extension CriteoPublisherSdk.CRMRAIDHandler : CriteoPublisherSdk.MRAIDResizeHandlerDelegate {
  public func didCloseResizedAdView()
}
public struct MRAIDPlayVideoMessage : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct MRAIDResizeMessage : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct MRAIDOrientationPropertiesMessage : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct MRAIDOrientationProperties {
  public init(allowOrientationChange: Swift.Bool, forceOrientation: CriteoPublisherSdk.MRAIDDeviceOrientation)
  public init(allowOrientationChange: Swift.Bool, orientationMask: UIKit.UIInterfaceOrientationMask)
  public static func orientationMask(for orientation: CriteoPublisherSdk.MRAIDDeviceOrientation) -> UIKit.UIInterfaceOrientationMask
}
@objc public protocol CRMRAIDLogger {
  @objc func mraidLog(error: Swift.String)
  @objc func mraidLog(warning: Swift.String)
  @objc func mraidLog(debug: Swift.String)
  @objc func mraidLog(info: Swift.String)
}
@objc public class MRAIDLogHandler : ObjectiveC.NSObject {
  public init(criteoLogger: any CriteoPublisherSdk.CRMRAIDLogger)
  @objc deinit
}
public enum LogLevel : Swift.String, Swift.Decodable {
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MRAIDCustomClosePosition : Swift.String, Swift.Decodable {
  case topLeft
  case topRight
  case center
  case bottomLeft
  case bottomRight
  case topCenter
  case bottomCenter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc extension CriteoPublisherSdk.CRSKAdNetworkInfo {
  @objc public static let CriteoId: Swift.String
  @objc dynamic public class func hasCriteoId() -> Swift.Bool
  @objc dynamic public class func skAdNetworkIds() -> [Swift.String]
}
@_inheritsConvenienceInitializers @objc public class CRMRAIDUtils : ObjectiveC.NSObject {
  @objc public static func loadMraid(from bundle: Foundation.Bundle?) -> Swift.String?
  @objc public static func build(html: Swift.String, from bundle: Foundation.Bundle?) -> Swift.String
  @objc public static func mraidResourceBundle() -> Foundation.Bundle?
  @objc public static func mraidTestResourceBundle() -> Foundation.Bundle?
  @objc override dynamic public init()
  @objc deinit
}
public struct MRAIDActionMessage : CriteoPublisherSdk.ActionRepresentable, Swift.Decodable {
  public let action: CriteoPublisherSdk.Action
  public init(from decoder: any Swift.Decoder) throws
}
public struct MRAIDLog : CriteoPublisherSdk.ActionRepresentable, Swift.Decodable {
  public let logId: Swift.String?
  public let message: Swift.String
  public let logLevel: CriteoPublisherSdk.LogLevel
  public let action: CriteoPublisherSdk.Action
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol CRExternalURLOpener {
  @objc func open(url: Foundation.URL)
}
public protocol MRAIDURLHandler : AnyObject {
  func handle(data: Foundation.Data)
}
final public class CRMRAIDURLHandler : CriteoPublisherSdk.MRAIDURLHandler {
  public init(with logger: any CriteoPublisherSdk.CRMRAIDLogger, urlOpener: any CriteoPublisherSdk.CRExternalURLOpener)
  final public func handle(data: Foundation.Data)
  @objc deinit
}
public protocol MRAIDResizeHandlerDelegate {
  func didCloseResizedAdView()
}
@_hasMissingDesignatedInitializers public class MRAIDResizeHandler {
  public enum Constants {
    public static let minHeight: CoreFoundation.CGFloat
    public static let minWidth: CoreFoundation.CGFloat
  }
  public func canResize(mraidState: CriteoPublisherSdk.MRAIDState) -> Swift.Bool
  public func resize(with resizeMessage: CriteoPublisherSdk.MRAIDResizeMessage, webViewContainer: UIKit.UIView?) throws
  public func updateResizeMessageToFit(containerSize: CoreFoundation.CGSize, positionInContainer: CoreFoundation.CGPoint, with message: CriteoPublisherSdk.MRAIDResizeMessage) throws -> CriteoPublisherSdk.MRAIDResizeMessage
  public func verifyCloseAreaOutOfBounds(containerSize: CoreFoundation.CGSize, positionInContainer: CoreFoundation.CGPoint, message: CriteoPublisherSdk.MRAIDResizeMessage, autoRotate: Swift.Bool) throws -> CriteoPublisherSdk.MRAIDResizeMessage
  public func verifyMinSize(message: CriteoPublisherSdk.MRAIDResizeMessage) throws
  public func closeAreaPositionInAdContainer(with newSize: CoreFoundation.CGSize, for customClosePosition: CriteoPublisherSdk.MRAIDCustomClosePosition) -> CoreFoundation.CGPoint
  public func close()
  @objc deinit
}
public enum MRAIDDeviceOrientation : Swift.String, Swift.Decodable {
  case portrait
  case landscape
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ActionRepresentable {
  var action: CriteoPublisherSdk.Action { get }
}
public enum Action : Swift.String, Swift.Decodable {
  case log
  case open
  case expand
  case close
  case none
  case playVideo
  case resize
  case orientationPropertiesUpdate
  case orientationPropertiesSet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension CriteoPublisherSdk.MRAIDState : Swift.Equatable {}
extension CriteoPublisherSdk.MRAIDState : Swift.Hashable {}
extension CriteoPublisherSdk.MRAIDState : Swift.RawRepresentable {}
extension CriteoPublisherSdk.CRPlacementType : Swift.Equatable {}
extension CriteoPublisherSdk.CRPlacementType : Swift.Hashable {}
extension CriteoPublisherSdk.CRPlacementType : Swift.RawRepresentable {}
extension CriteoPublisherSdk.LogLevel : Swift.Equatable {}
extension CriteoPublisherSdk.LogLevel : Swift.Hashable {}
extension CriteoPublisherSdk.LogLevel : Swift.RawRepresentable {}
extension CriteoPublisherSdk.MRAIDCustomClosePosition : Swift.Equatable {}
extension CriteoPublisherSdk.MRAIDCustomClosePosition : Swift.Hashable {}
extension CriteoPublisherSdk.MRAIDCustomClosePosition : Swift.RawRepresentable {}
extension CriteoPublisherSdk.MRAIDDeviceOrientation : Swift.Equatable {}
extension CriteoPublisherSdk.MRAIDDeviceOrientation : Swift.Hashable {}
extension CriteoPublisherSdk.MRAIDDeviceOrientation : Swift.RawRepresentable {}
extension CriteoPublisherSdk.Action : Swift.Equatable {}
extension CriteoPublisherSdk.Action : Swift.Hashable {}
extension CriteoPublisherSdk.Action : Swift.RawRepresentable {}
